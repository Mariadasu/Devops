1. Create 2 instances ( 1. Master and 2. managed host) on AWS 
    DO this step only on Master Node
      user data script:
           a. sudo yum update
           b. sudo yum install ansible -y
           c. sudo yum install python3-pip
           d. sudo pip3 install botocore boto3
           e. sudo yum install yum-utils


2. connect to master node:   verify your installation
         a.  ansible --version

3. change the master node hostname:
         a. sudo hostnamectl set-hostname control-node.example.com

4. change the manged node hostname:
        a. sudo hostnamectl set-hostname managed-node-01.example.com

5. login to the master node:  edit the /etc/hosts file.   add the following entries
       a. sudo nano /etc/hosts
-------------add the follwoing lines  (Private IP address) -----------------
       172.31.13.217   control-node.example.com    control-node
       172.31.14.112   managed-node-01.example.com managed-node-01 
------------------------------------------------------------------------

6. Reconnect to the master node again (Check the prompt)

7. mkdir ansible-demo && cd ansible-demo

8. Create a inventory file
     a. sudo nano "inventory.ini"
------------- add the follwoing line ------
[dev] 
managed-node-01.example.com
---------------------------------------

9. Copy the "ansible-key" from master Node to Slave-node in project file. (use powershell to copy "key" from localhost to Control node)
      a.  scp -i ".\ansible-key.pem"  .\ansible-key.pem ec2-user@ec2-13-233-207-151.ap-south-1.compute.amazonaws.com:/home/ec2-user/ansible-demo

10. Change the "ansible-key" permissions 
      a. sudo chmod 400 ./ansible-key.pem

11. Creaete a "ansible.cfg" file
	a. sudo nano "ansible.cfg"
----------------add the following lines ----------------
[defaults]
inventory = ./inventory.ini
interpreter_python=/usr/bin/python3
remote_user = ec2-user
ask_pass = false
private_key_file = ./ansible-key.pem
host_key_checking = False
roles_path = roles/
log_path = ansible.log
------------------------------------------------------

12. check the config file using command
      a.  ansible --version

13. now try to ssh to the Slave Node using command:  (Note: you can use any IP. Public or Private)
      a. ssh -i ./ansible-key.pem ec2-user@172.31.14.112  

14. check the environment setup and whether you can ping to the managed node using command:
     a. ansible dev -m ping
######################################################################################

TASK 1: Roll out the NextCloud automatically via Ansible

Solution: user docker images of NextCloud and install it via ansible-playbook

---
- name: Deploy Nextcloud on Docker
  hosts: all
  become: yes
  vars:
    db_volume: mariadb
    nextcloud: nextcloud
  tasks:
    - name: Pull Nextcloud Docker image
      docker_image:
        name: nextcloud:latest
        source: pull
      become: yes

    - name: Deploy MariaDB server
      docker_container:
        image: mariadb
        name: mariadb
        command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
          --innodb-file-per-table=1 --skip-innodb-read-only-compressed
        volumes:
          - "{{db_volume}}:/var/lib/mysql"
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: db
          MYSQL_USER: mysqluser

    - name: Run Nextcloud container
      docker_container:
        name: nextcloud
        image: nextcloud:latest
        ports:
          - 8080:80
        links:
          - "{{db_volume}}:/var/lib/mysql"
        volumes:
          - "{{nextcloud}}:/var/www/html/"
        env:
          MYSQL_HOST: mariadb
          MYSQL_DATABASE: db
          MYSQL_USER: mysql
          MYSQL_PASSWORD: password
      become: yes

    - name: Configure firewall to allow incoming traffic on port 8080
      firewalld:
        port: 8080/tcp
        state: enabled
        permanent: yes
      become: yes
    - name: Ensure Docker containers are started on boot
      systemd:
        name: docker
        enabled: yes
      become: yes
--------------------------------------------------------------------------------------------------------------------------

to run this successfully:
1) install "firewalld" package on managed node using command:
       a.  sudo yum install firewalld -y
       b.  sudo systemctl start firewalld
       c.  sudo systemctl enable firewalld
       d.  sudo systemctl status firewalld

2) other docker commands to check any problem:
       a. sudo docker ps -a
       b.  sudo docker ps
       c.  sudo docker restart nextcloud
       d.  curl http://localhost:8080
       e.  sudo docker images
       f.   sudo docker ps
       g.  netstat -tuln | grep 8080
       h.  docker logs d4fd508b915d

3) set the security group (open port 8080)
     custom tcp    ->   8080    -> anyIP

==============================================
Ref website: https://markontech.com/devops/deploy-nextcloud-on-docker-using-ansible/


